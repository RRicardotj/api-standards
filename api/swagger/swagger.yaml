swagger: "2.0"
info:
  version: "1.0.0"
  title: ACAASYS
# during dev, should point to your local machine
host: localhost:8080
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
#  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json

tags:
  - name: auth
    description: Auth
  - name: user
    description: User
  - name: grant
    description: Grant
  - name: role
    description: Role
  - name: widget
    description: Widget
  


paths:
  /auth/signin:
    post:
      tags:
      - auth
      description: Login endpoint
      operationId: AUTH_SIGNIN
      parameters:
        - name: body
          in: body
          description: Body request
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        "200": 
          description: Success
          schema:
            type: object
            properties:
              user:
                description: User name
                type: string
              email:
                description: User mail
                type: string
              token:
                description: Access token
                type: string
        "403":
          description: Invalid credentials
          schema:
            type: object
            properties: 
              error: 
                type: string
                example: Credenciales invalidas
  /auth/password:
    post:
      tags:
      - auth
      description: Change Password
      operationId: AUTH_CHNG_PSS
      parameters:
      - name: currentPassword
        in: formData
        description : currentPassword
        type: string
        required: true
      - name: newPassword
        in: formData
        description : currentPassword
        type: string
        required: true
      - name: newPassword_confirmation
        in: formData
        description : currentPassword
        type: string
        required: true
      responses:
        "200": 
          description: Success
          schema:
            type: object
            properties:
              message:
                description: Success message
                type: string
        "403":
          description: Invalid credentials
          schema:
            type: object
            properties: 
              error: 
                type: string
                example: Credenciales invalidas
      security:
        - jwt: []    

  /user:
    post:
      tags:
      - user
      description: Store user
      operationId: USR_STO
      parameters:
        - name: name
          in: formData
          type: string
        - name: email
          in: formData
          type: string
        - name: enabled
          in: formData
          type: boolean
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserResource"
        "403":
          description: Validation error
          schema:
            $ref: "#/definitions/ValidationError"
      security:
        - jwt: []
    get:
      tags:
      - user
      description: View all users
      operationId: USR_VIEW
      summary: List of all users
      responses:
        "200":
          description: Success
          schema:
            type: array
            items: 
              $ref: "#/definitions/UserResource"
      security:
        - jwt: []


  /user/{id}:
    get:
      tags:
      - user
      description: View user details
      operationId: USR_VIEW_DET
      parameters:
        - name: id
          in: path
          description: Id of user
          required: true
          type: integer
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserResource"
      security:
        - jwt: []
    put:
      tags:
      - user
      description: Update user
      operationId: USR_UPD
      parameters:
        - name: id
          in: path
          description: Id of user
          required: true
          type: integer
        - name: name
          in: formData
          type: string
        - name: email
          in: formData
          type: string
        - name: enabled
          in: formData
          type: boolean
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserResource"
        "403":
          description: Validation error
          schema:
            $ref: "#/definitions/ValidationError"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/NotFoundError"
      security:
        - jwt: []
    delete:
      tags:
      - user
      description: Destroy user
      operationId: USR_DES
      parameters:
        - name: id
          in: path
          type: integer
          required: true
      responses:
        "200": 
          description: Success
          schema:
            properties: 
              id:
                type: integer
        "400":
          description: Client error
          schema:
            $ref: "#/definitions/GeneralError"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/NotFoundError"
      security:
        - jwt: []

  /user/{id}/sessions:
    get:
      tags:
      - user
      description: view all user sessions
      operationId: USR_SESS
      parameters:
        - name: id
          in: path
          type: integer
          required: true
        - name: page
          in: query
          type: integer
        - name: from
          in: query
          type: string
        - name: to
          in: query
          type: string
      responses:
        "200":
          description: Success
          schema:
            properties:
              totalPages:
                type: integer
              page:
                type: integer
              rows:
                type: array
                items:
                  $ref: "#/definitions/SessionResource"
      security:
        - jwt: []      

  /grant:
    get:
      tags:
      - grant
      description: View all grants
      operationId: GRNT_VIEW
      summary: List of all grants
      responses:
        "200":
          description: Success
          schema:
            type: array
            items: 
              type: object
              properties:
                value:
                  type: integer
                text:
                  type: string
      security:
        - jwt: []
    post:
      tags:
      - grant
      description: Validate grants
      operationId: GRNT_CHCK
      parameters:
      - name: grants
        in: formData
        type: array
        items:
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              type: object
        "403":
          description: Validation error
          schema:
            $ref: "#/definitions/ValidationError"
      security:
        - jwt: []

  /role:
    get:
      tags:
      - role
      summary: List of roles
      description: List of roles in users
      operationId: ROL_VIEW
      responses:
        "200":
          description: Success
          schema:
            type: array
            items: 
              $ref: "#/definitions/RoleResource" 
      security:
          - jwt: []
    post:
      tags:
      - role
      summary: Create role
      description: Create a role
      operationId: ROLE_STO
      parameters:
        - name: name
          in: formData
          description: Name of role
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/RoleResource"
        "403":
          description: Validation error
          schema:
            $ref: "#/definitions/ValidationError"
      security:
        - jwt: []
        
  /role/{id}:
    put:
      tags:
      - role
      summary: Update role
      description: Update a rol
      operationId: ROLE_UPD
      parameters:
        - name: id
          in: path
          description: Role id
          required: true
          type: integer
        - name: name
          in: formData
          description: Name of role
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/RoleResource"
        "403":
          description: Validation error
          schema:
            $ref: "#/definitions/ValidationError"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/NotFoundError"
      security:
        - jwt: []
    get:
      tags:
      - role
      description: View role details
      operationId: ROL_VIEW_DET
      parameters:
        - name: id
          in: path
          description: Role id
          required: true
          type: integer
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/RoleResource"
        "403":
          description: Validation error
          schema:
            $ref: "#/definitions/ValidationError"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/NotFoundError"
      security:
        - jwt: []
    delete:
      tags:
      - role
      description: Destroy Role
      operationId: ROL_DES
      parameters:
        - name: id
          in: path
          type: integer
          required: true
      responses:
        "200": 
          description: Success
          schema:
            properties: 
              id:
                type: integer
        "400":
          description: Client error
          schema:
            $ref: "#/definitions/GeneralError"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/NotFoundError"
      security:
        - jwt: []

  /role/dropdown:
    get:
      tags:
      - role
      summary: List of roles actives to fill a dropdown
      operationId: ROLE_DROPDOWN
      responses:
        "200":
          description: Success
          schema:
            type: array
            items: 
              type: object
              properties:
                value:
                  type: integer
                text:
                  type: string
      security:
        - jwt: []
  /role/{id}/grants:
    get:
      tags:
      - role
      description: List grants of role
      operationId: ROL_GRANT_IND
      parameters:
        - name: id
          in: path
          description: Role id
          type: integer
          required: true
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              type: object
              properties:
                grantId:
                  type: integer
      security:
        - jwt: []
    put:
      tags:
      - role
      description: Set grants to role
      operationId: ROL_GRANT_UPD
      parameters:
        - name: id
          in: path
          description: Role id
          type: integer
          required: true
        - name: grantId
          in: formData
          required: true
          description: Grants Ids
          type: array
          items:
            type: integer
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              type: object
              properties:
                grantId:
                  type: integer
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/NotFoundError"
      security:
        - jwt: []
  
  /widget:
    get:
      tags:
      - widget
      description: Get users widgets
      operationId: WGT_IND
      responses:
        "200":
          description: Success
          schema:
            type: object
            properties:
              zoneA:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    component:
                      type: string
                    position:
                      type: integer
                    color:
                      type: string
                    enabled:
                      type: string
              zoneB:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    component:
                      type: string
                    position:
                      type: integer
                    color:
                      type: string
                    enabled:
                      type: string
      security:
        - jwt: []
  /widget/order:
    post:
      tags:
      - widget
      description: Set widget order
      operationId: WGT_ORD
      parameters:
        - name: widgets
          in: formData
          required: true
          description: Widgets
          type: array
          items:
            type: integer
      responses:
        "200":
          description: Success
          schema:
            type: object
            properties:
              result:
                type: string
      security:
        - jwt: []
  /widget/{code}:
    post:
      tags:
      - widget
      description: Get widget data by code
      operationId: WGT_DAT
      parameters:
        - name: code
          in: path
          required: true
          description: widgetCode
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: object
            properties:
              code:
                type: string
              zone:
                type: string
              component:
                type: string
              position:
                type: integer
              data:
                type: object
              isEnabled:
                type: boolean
        "403":
          description: user is not witget owner
          schema:
            type: object
            properties: 
              error: 
                type: string
                example: El widget no corresponde al usuario
      security:
        - jwt: []
        

definitions:
  UserResource:
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      enabled:
        type: boolean
  RoleResource:
    properties:
      id:
        type: integer
      name:
        type: string
  SessionResource:
    properties:
      createdAt:
        type: string
      updatedAt:
        type: string
      browser:
        type: string
      minutes:
        type: string
  ValidationError:
    properties:
      field:
        type: string
  GeneralError:
    properties:
      error:
        type: string
  NotFoundError:
    properties:
      error:
        type: string
        example: 'Recurso no encontrado'

securityDefinitions:
  jwt:
    type: apiKey
    in: header
    name: Authorization